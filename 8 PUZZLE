import copy

def get_puzzle(name):
    print(f"\nEnter the {name} puzzle (3x3, use -1 for blank):")
    puzzle = []
    for i in range(3):
        row = list(map(int, input(f"Row {i+1} (space-separated 3 numbers): ").split()))
        puzzle.append(row)
    return puzzle

def move(temp, movement):
    for i in range(3):
        for j in range(3):
            if temp[i][j] == -1:
                if movement == "up" and i > 0:
                    temp[i][j], temp[i-1][j] = temp[i-1][j], temp[i][j]
                elif movement == "down" and i < 2:
                    temp[i][j], temp[i+1][j] = temp[i+1][j], temp[i][j]
                elif movement == "left" and j > 0:
                    temp[i][j], temp[i][j-1] = temp[i][j-1], temp[i][j]
                elif movement == "right" and j < 2:
                    temp[i][j], temp[i][j+1] = temp[i][j+1], temp[i][j]
                return temp
    return temp

def dls(puzzle, depth, limit, last_move, goal):
    if puzzle == goal:
        return True, [puzzle], []

    if depth >= limit:
        return False, [], []

    for move_dir, opposite in [("up","down"), ("left","right"), ("down","up"), ("right","left")]:
        if last_move == opposite:  # avoid direct backtracking
            continue
        temp = copy.deepcopy(puzzle)
        new_state = move(temp, move_dir)
        if new_state != puzzle:  # valid move
            found, path, moves = dls(new_state, depth+1, limit, move_dir, goal)
            if found:
                return True, [puzzle] + path, [move_dir] + moves
    return False, [], []

def ids(start, goal):
    for limit in range(1, 50):  # reasonable max depth
        print(f"\nTrying depth limit = {limit}")
        found, path, moves = dls(start, 0, limit, None, goal)
        if found:
            print("Solution found!")
            for step in path:
                print(step)
            print("Moves:", moves)
            print("Path cost =", len(path)-1)
            return
    print(" Solution not found within depth limit.")

# ---------------- MAIN ----------------
start_puzzle = get_puzzle("start")
goal_puzzle = get_puzzle("goal")

print("\n~~~~~~~~~~~~ IDDFS ~~~~~~~~~~~~")
ids(start_puzzle, goal_puzzle)


OUTPUT:
Enter the start puzzle (3x3, use -1 for blank):
Row 1 (space-separated 3 numbers):    5 4 -1
Row 2 (space-separated 3 numbers):  6 1 8
Row 3 (space-separated 3 numbers):  7 3 2

Enter the goal puzzle (3x3, use -1 for blank):
Row 1 (space-separated 3 numbers):  -1 1 2
Row 2 (space-separated 3 numbers):  3 4 5
Row 3 (space-separated 3 numbers):  6 7 8

~~~~~~~~~~~~ IDDFS ~~~~~~~~~~~~

Trying depth limit = 1

Trying depth limit = 2

Trying depth limit = 3

Trying depth limit = 4

Trying depth limit = 5

Trying depth limit = 6

Trying depth limit = 7

Trying depth limit = 8

Trying depth limit = 9

Trying depth limit = 10

Trying depth limit = 11

Trying depth limit = 12

Trying depth limit = 13

Trying depth limit = 14

Trying depth limit = 15

Trying depth limit = 16

Trying depth limit = 17

Trying depth limit = 18

Trying depth limit = 19

Trying depth limit = 20

Trying depth limit = 21

Trying depth limit = 22

Trying depth limit = 23

Trying depth limit = 24
\Solution found!
[[5, 4, -1], [6, 1, 8], [7, 3, 2]]
[[5, -1, 4], [6, 1, 8], [7, 3, 2]]
[[-1, 5, 4], [6, 1, 8], [7, 3, 2]]
[[6, 5, 4], [-1, 1, 8], [7, 3, 2]]
[[6, 5, 4], [7, 1, 8], [-1, 3, 2]]
[[6, 5, 4], [7, 1, 8], [3, -1, 2]]
[[6, 5, 4], [7, 1, 8], [3, 2, -1]]
[[6, 5, 4], [7, 1, -1], [3, 2, 8]]
[[6, 5, -1], [7, 1, 4], [3, 2, 8]]
[[6, -1, 5], [7, 1, 4], [3, 2, 8]]
[[6, 1, 5], [7, -1, 4], [3, 2, 8]]
[[6, 1, 5], [7, 2, 4], [3, -1, 8]]
[[6, 1, 5], [7, 2, 4], [-1, 3, 8]]
[[6, 1, 5], [-1, 2, 4], [7, 3, 8]]
[[-1, 1, 5], [6, 2, 4], [7, 3, 8]]
[[1, -1, 5], [6, 2, 4], [7, 3, 8]]
[[1, 2, 5], [6, -1, 4], [7, 3, 8]]
[[1, 2, 5], [6, 3, 4], [7, -1, 8]]
[[1, 2, 5], [6, 3, 4], [-1, 7, 8]]
[[1, 2, 5], [-1, 3, 4], [6, 7, 8]]
[[1, 2, 5], [3, -1, 4], [6, 7, 8]]
[[1, 2, 5], [3, 4, -1], [6, 7, 8]]
[[1, 2, -1], [3, 4, 5], [6, 7, 8]]
[[1, -1, 2], [3, 4, 5], [6, 7, 8]]
[[-1, 1, 2], [3, 4, 5], [6, 7, 8]]
Moves: ['left', 'left', 'down', 'down', 'right', 'right', 'up', 'up', 'left', 'down', 'down', 'left', 'up', 'up', 'right', 'down', 'down', 'left', 'up', 'right', 'right', 'up', 'left', 'left']
Path cost = 24
